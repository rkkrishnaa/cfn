---
AWSTemplateFormatVersion: '2010-09-09'

Description: 'Cloudformation template to create a network infrastructure for hosting an application in elasticbeanstack.'

Parameters:
  VPC1Name:
    Description: Name of the new VPC1
    Type: String
    Default: vpc1

  VPC1CidrBlock:
    Description: CIDR block you want the VPC1 to cover
    Type: String
    Default: 10.0.0.0/16

  VPC1PublicSubnet1CidrBlock:
    Description: CIDR block of the VPC1 public subnet 1
    Type: String
    Default: 10.0.11.0/24

  VPC1PublicSubnet1AvailabilityZone:
    Description: Availability Zone of the VPC1 public subnet 1
    Type: String
    Default: us-west-2a

  VPC1PublicSubnet2CidrBlock:
    Description: CIDR block of the VPC1 public subnet 2
    Type: String
    Default: 10.0.12.0/24

  VPC1PublicSubnet2AvailabilityZone:
    Description: Availability Zone of the VPC1 public subnet 2
    Type: String
    Default: us-west-2b

  VPC1PrivateSubnet1CidrBlock:
    Description: CIDR block of the VPC1 private subnet 1
    Type: String
    Default: 10.0.21.0/24

  VPC1PrivateSubnet1AvailabilityZone:
    Description: Availability Zone of the VPC1 private subnet 1
    Type: String
    Default: us-west-2a

  VPC1PrivateSubnet2CidrBlock:
    Description: CIDR block of the VPC1 private subnet 2
    Type: String
    Default: 10.0.22.0/24

  VPC1PrivateSubnet2AvailabilityZone:
    Description: Availability Zone of the VPC1 private subnet 2
    Type: String
    Default: us-west-2b

  VPC2Name:
    Description: Name of the new VPC2
    Type: String
    Default: vpc2

  VPC2CidrBlock:
    Description: CIDR block you want the VPC2 to cover
    Type: String
    Default: 20.0.0.0/16

  VPC2PublicSubnet1CidrBlock:
    Description: CIDR block of the VPC2 public subnet 1
    Type: String
    Default: 20.0.11.0/24

  VPC2PublicSubnet1AvailabilityZone:
    Description: Availability Zone of the VPC2 public subnet 1
    Type: String
    Default: us-west-2a

  VPC2PublicSubnet2CidrBlock:
    Description: CIDR block of the VPC2 public subnet 2
    Type: String
    Default: 20.0.12.0/24

  VPC2PublicSubnet2AvailabilityZone:
    Description: Availability Zone of the VPC2 public subnet 2
    Type: String
    Default: us-west-2b

  VPC2PrivateSubnet1CidrBlock:
    Description: CIDR block of the VPC2 private subnet 1
    Type: String
    Default: 20.0.21.0/24

  VPC2PrivateSubnet1AvailabilityZone:
    Description: Availability Zone of the VPC2 private subnet 1
    Type: String
    Default: us-west-2a

  VPC2PrivateSubnet2CidrBlock:
    Description: CIDR block of the VPC2 private subnet 2
    Type: String
    Default: 20.0.22.0/24

  VPC2PrivateSubnet2AvailabilityZone:
    Description: Availability Zone of the VPC2 private subnet 2
    Type: String
    Default: us-west-2b

Resources:
  #vpc1
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC1CidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref 'VPC1Name'] ]

  VPC1PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'VPC1PublicSubnet1AvailabilityZone'
      CidrBlock: !Ref VPC1PublicSubnet1CidrBlock
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC1Name, PublicSubnet1 ] ]
      VpcId: !Ref 'VPC1'

  VPC1PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'VPC1PublicSubnet2AvailabilityZone'
      CidrBlock: !Ref VPC1PublicSubnet2CidrBlock
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC1Name, PublicSubnet2 ] ]
      VpcId: !Ref 'VPC1'

  VPC1PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'VPC1PrivateSubnet1AvailabilityZone'
      CidrBlock: !Ref VPC1PrivateSubnet1CidrBlock
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC1Name, PrivateSubnet1 ] ]
      VpcId: !Ref 'VPC1'

  VPC1PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'VPC1PrivateSubnet2AvailabilityZone'
      CidrBlock: !Ref VPC1PrivateSubnet2CidrBlock
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC1Name, PrivateSubnet2 ] ]
      VpcId: !Ref 'VPC1'

  VPC1PublicNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC1Name, PublicNacl ] ]
      VpcId: !Ref 'VPC1'

  VPC1PrivateNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC1Name, PrivateNacl ] ]
      VpcId: !Ref 'VPC1'

  VPC1PublicNaclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPC1PublicNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  VPC1PublicNaclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPC1PublicNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  VPC1PrivateNaclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPC1PrivateNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  VPC1PrivateNaclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPC1PrivateNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  VPC1PublicSub1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'VPC1PublicSubnet1'
      NetworkAclId: !Ref 'VPC1PublicNacl'

  VPC1PublicSub2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'VPC1PublicSubnet2'
      NetworkAclId: !Ref 'VPC1PublicNacl'

  VPC1PrivateSub1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'VPC1PrivateSubnet1'
      NetworkAclId: !Ref 'VPC1PrivateNacl'

  VPC1PrivateSub2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'VPC1PrivateSubnet2'
      NetworkAclId: !Ref 'VPC1PrivateNacl'

  VPC1InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC1Name, InternetGateway ] ]

  VPC1AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC1'
      InternetGatewayId: !Ref 'VPC1InternetGateway'

  VPC1PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC1'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC1Name, PublicRouteTable ] ]

  VPC1PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPC1AttachInternetGateway
    Properties:
      RouteTableId: !Ref 'VPC1PublicRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'VPC1InternetGateway'

  VPC1PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC1'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC1Name, PrivateRouteTable ] ]

  VPC1PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC1PublicSubnet1'
      RouteTableId: !Ref 'VPC1PublicRouteTable'

  VPC1PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC1PublicSubnet2'
      RouteTableId: !Ref 'VPC1PublicRouteTable'

  VPC1PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC1PrivateSubnet1'
      RouteTableId: !Ref 'VPC1PrivateRouteTable'

  VPC1PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC1PrivateSubnet2'
      RouteTableId: !Ref 'VPC1PrivateRouteTable'

  #nat
  NAT1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP1
        - AllocationId
      SubnetId: !Ref VPC1PublicSubnet1

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NAT1Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref VPC1PrivateRouteTable
      NatGatewayId: !Ref NAT1

  #vpc2
  VPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPC2CidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref 'VPC2Name'] ]

  VPC2PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'VPC2PublicSubnet1AvailabilityZone'
      CidrBlock: !Ref VPC2PublicSubnet1CidrBlock
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC2Name, PublicSubnet1 ] ]
      VpcId: !Ref 'VPC2'

  VPC2PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'VPC2PublicSubnet2AvailabilityZone'
      CidrBlock: !Ref VPC2PublicSubnet2CidrBlock
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC2Name, PublicSubnet2 ] ]
      VpcId: !Ref 'VPC2'

  VPC2PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'VPC2PrivateSubnet1AvailabilityZone'
      CidrBlock: !Ref VPC2PrivateSubnet1CidrBlock
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC2Name, PrivateSubnet1 ] ]
      VpcId: !Ref 'VPC2'

  VPC2PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'VPC2PrivateSubnet2AvailabilityZone'
      CidrBlock: !Ref VPC2PrivateSubnet2CidrBlock
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC2Name, PrivateSubnet2 ] ]
      VpcId: !Ref 'VPC2'

  VPC2PublicNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC2Name, PublicNacl ] ]
      VpcId: !Ref 'VPC2'

  VPC2PrivateNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC2Name, PrivateNacl ] ]
      VpcId: !Ref 'VPC2'

  VPC2PublicNaclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPC2PublicNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  VPC2PublicNaclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPC2PublicNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  VPC2PrivateNaclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPC2PrivateNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  VPC2PrivateNaclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPC2PrivateNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  VPC2PublicSub1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'VPC2PublicSubnet1'
      NetworkAclId: !Ref 'VPC2PublicNacl'

  VPC2PublicSub2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'VPC2PublicSubnet2'
      NetworkAclId: !Ref 'VPC2PublicNacl'

  VPC2PrivateSub1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'VPC2PrivateSubnet1'
      NetworkAclId: !Ref 'VPC2PrivateNacl'

  VPC2PrivateSub2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'VPC2PrivateSubnet2'
      NetworkAclId: !Ref 'VPC2PrivateNacl'

  VPC2InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC2Name, InternetGateway ] ]

  VPC2AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC2'
      InternetGatewayId: !Ref 'VPC2InternetGateway'

  VPC2PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC2'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC2Name, PublicRouteTable ] ]

  VPC2PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPC2AttachInternetGateway
    Properties:
      RouteTableId: !Ref 'VPC2PublicRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'VPC2InternetGateway'

  VPC2PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC2'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Sub '${AWS::StackName}', !Ref VPC2Name, PrivateRouteTable ] ]

  VPC2PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC2PublicSubnet1'
      RouteTableId: !Ref 'VPC2PublicRouteTable'

  VPC2PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC2PublicSubnet2'
      RouteTableId: !Ref 'VPC2PublicRouteTable'

  VPC2PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC2PrivateSubnet1'
      RouteTableId: !Ref 'VPC2PrivateRouteTable'

  VPC2PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPC2PrivateSubnet2'
      RouteTableId: !Ref 'VPC2PrivateRouteTable'

  #vpc peering
  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      PeerVpcId: !Ref VPC1
      VpcId: !Ref VPC2

  PeeringRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref VPC2CidrBlock
      RouteTableId: !Ref VPC1PrivateRouteTable
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PeeringRoute2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref VPC1CidrBlock
      RouteTableId: !Ref VPC2PrivateRouteTable
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PeeringRoute3:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref VPC2CidrBlock
      RouteTableId: !Ref VPC1PublicRouteTable
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PeeringRoute4:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: !Ref VPC1CidrBlock
      RouteTableId: !Ref VPC2PublicRouteTable
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  #nat
  NAT2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP2
        - AllocationId
      SubnetId: !Ref VPC2PublicSubnet2

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NAT2Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref VPC2PrivateRouteTable
      NatGatewayId: !Ref NAT2


Outputs:
  vpc1:
    Description: 'vpc1'
    Value: !Ref VPC1
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC1 ] ]

  vpc1PublicSubnet1:
    Description: 'vpc1 public subnet1'
    Value: !Ref VPC1PublicSubnet1
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC1PublicSubnet1 ] ]

  vpc1PublicSubnet2:
    Description: 'vpc1 public subnet2'
    Value: !Ref VPC1PublicSubnet2
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC1PublicSubnet2 ] ]

  vpc1PrivateSubnet1:
    Description: 'vpc1 private subnet1'
    Value: !Ref VPC1PrivateSubnet1
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC1PrivateSubnet1 ] ]

  vpc1PrivateSubnet2:
    Description: 'vpc1 private subnet2'
    Value: !Ref VPC1PrivateSubnet2
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC1PrivateSubnet2 ] ]

  vpc2:
    Description: 'vpc2'
    Value: !Ref VPC2
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC2 ] ]

  vpc2PublicSubnet1:
    Description: 'vpc2 public subnet1'
    Value: !Ref VPC2PublicSubnet1
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC2PublicSubnet1 ] ]

  vpc2PublicSubnet2:
    Description: 'vpc2 public subnet2'
    Value: !Ref VPC2PublicSubnet2
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC2PublicSubnet2 ] ]

  vpc2PrivateSubnet1:
    Description: 'vpc2 private subnet1'
    Value: !Ref VPC2PrivateSubnet1
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC2PrivateSubnet1 ] ]

  vpc2PrivateSubnet2:
    Description: 'vpc2 private subnet2'
    Value: !Ref VPC2PrivateSubnet2
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC2PrivateSubnet2 ] ]

  vpc1CidrBlock:
    Description: 'VPC1 Cidr Block'
    Value: !Ref VPC1CidrBlock
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC1CidrBlock ] ]

  vpc2CidrBlock:
    Description: 'VPC2 Cidr Block'
    Value: !Ref VPC2CidrBlock
    Export:
      Name: !Join [ "-", [ !Ref "AWS::StackName", VPC2CidrBlock ] ]