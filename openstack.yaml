---
AWSTemplateFormatVersion: '2010-09-09'

Description: 'Cloudformation template to install openstack all in one setup'

Parameters:
  VPCName:
    Description: Name of the new VPC for the cluster
    Type: String
    Default: sandbox
  
  VPCCidrBlock:
    Description: CIDR block you want the VPC to cover
    Type: String
    Default: 10.0.0.0/16
  
  PublicSubnet1CidrBlock:
    Description: CIDR block of the public subnet 1
    Type: String
    Default: 10.0.11.0/24
  
  PublicSubnet1AvailabilityZone:
    Description: Availability Zone of the public subnet 1
    Type: String
    Default: us-east-1a
  
  PublicSubnet2CidrBlock:
    Description: CIDR block of the public subnet 2
    Type: String
    Default: 10.0.12.0/24
  
  PublicSubnet2AvailabilityZone:
    Description: Availability Zone of the public subnet 2
    Type: String
    Default: us-east-1b
  
  PrivateSubnet1CidrBlock:
    Description: CIDR block of the private subnet 1 
    Type: String
    Default: 10.0.21.0/24
  
  PrivateSubnet1AvailabilityZone:
    Description: Availability Zone of the private subnet 1
    Type: String
    Default: us-east-1a
  
  PrivateSubnet2CidrBlock:
    Description: CIDR block of the private subnet 2
    Type: String
    Default: 10.0.22.0/24
  
  PrivateSubnet2AvailabilityZone:
    Description: Availability Zone of the private subnet 2
    Type: String
    Default: us-east-1b
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: key
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, m3.medium, m4.large, m4.xlarge, m4.2xlarge]
    ConstraintDescription: Enter a vaild EC2 instance type.
  
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  AMIId:
    Description: Image Id
    Type: String
    Default: ami-0f9cf087c1f27d9b1
   
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref 'VPCName'
          
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'PublicSubnet1AvailabilityZone'
      CidrBlock: !Ref PublicSubnet1CidrBlock
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref VPCName, PublicSubnet1 ] ]
      VpcId: !Ref 'VPC'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'PublicSubnet2AvailabilityZone'
      CidrBlock: !Ref PublicSubnet2CidrBlock
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref VPCName, PublicSubnet2 ] ]
      VpcId: !Ref 'VPC'
      
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'PrivateSubnet1AvailabilityZone'
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref VPCName, PrivateSubnet1 ] ] 
      VpcId: !Ref 'VPC'
      
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'PrivateSubnet2AvailabilityZone'
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref VPCName, PrivateSubnet2 ] ]
      VpcId: !Ref 'VPC'
      
  PublicNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref VPCName, PublicNacl ] ]
      VpcId: !Ref 'VPC'
  
  PrivateNacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref VPCName, PrivateNacl ] ]
      VpcId: !Ref 'VPC'

  PublicNaclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  PublicNaclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  PrivateNaclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  PrivateNaclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNacl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: "-1"
        Type: "-1"

  PublicSub1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      NetworkAclId: !Ref 'PublicNacl'
       
  PublicSub2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      NetworkAclId: !Ref 'PublicNacl'
  
  PrivateSub1NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1' 
      NetworkAclId: !Ref 'PrivateNacl'
      
  PrivateSub2NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2' 
      NetworkAclId: !Ref 'PrivateNacl'
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref VPCName, InternetGateway ] ]
  
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref VPCName, PublicRouteTable ] ]
  
  PublicRoute:
    Type: 'AWS::EC2::Route'        
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'
    
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref VPCName, PublicRouteTable ] ]
  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2'
      RouteTableId: !Ref 'PublicRouteTable'

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet1'
      RouteTableId: !Ref 'PrivateRouteTable'
  
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnet2'
      RouteTableId: !Ref 'PrivateRouteTable'  
  
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: sandboxsg
      GroupDescription: Security Group for Sandbox
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref VPCName, sandboxsg ] ]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        Description: Open to an external network
        CidrIp: !Ref 'SSHLocation'
      SecurityGroupEgress:
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: 0
        ToPort: 65535
        Description: Open to an external network
  
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref 'PublicSubnet1'
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      SecurityGroupIds: [ !Ref 'InstanceSecurityGroup' ]
      ImageId: !Ref 'AMIId'
      Tenancy: 'default'
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref VPCName, !Ref 'AWS::StackName' ] ]
      BlockDeviceMappings:
        - DeviceName: '/dev/sda1'
          Ebs:
            VolumeType: 'standard'
            VolumeSize: '50'
            DeleteOnTermination: 'true'
      UserData: {
        'Fn::Base64': {
          'Fn::Join': [
            "\n",
            [
              "#!/bin/bash",
              "sudo apt update"   
              "sudo apt install git -y",
              "git clone https://github.com/rkkrishnaa/openstack-ocata.git",
              "cd openstack-ocata",
              "bash installer.sh"
            ]
          ]
        }
      }
      
Outputs:
  InstanceId:
    Description: 'Instance Id of the newly created instance'
    Value: !Ref 'EC2Instance'
    
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
    
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
